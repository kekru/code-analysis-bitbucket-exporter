import java.nio.file.Paths

plugins {
    id 'application'
    id "org.sonarqube" version "2.6.2"
    id 'org.gradle.java'
    id 'org.gradle.maven-publish'
    id 'org.gradle.jacoco'
    id 'java'
    id 'pmd'
    id "com.github.spotbugs" version "4.2.0"
}

apply plugin: 'java'
apply plugin: 'checkstyle'

final File pmdXsd = Paths.get(projectDir.absolutePath, "src/main/resources/analysis/pmd/report_2_0_0.xsd").toFile()

// https://github.com/spotbugs/spotbugs/blob/4.0.3/spotbugs/etc/bugcollection.xsd
final File spotbugsXsd = Paths.get(projectDir.absolutePath, "src/main/resources/analysis/spotbugs/bugcollection.xsd").toFile()

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    //withJavadocJar()
    //withSourcesJar()
}

dependencies {
    // implementation "de.kekru.java-utils:java-utils:0.0.1-SNAPSHOT"
    implementation "com.github.kekru:java-utils:b23d631f6eeff3c29f4e5d0066019df67ce25987"

    implementation "org.slf4j:slf4j-api:1.7.25"
    implementation "org.slf4j:slf4j-simple:1.7.9"
    implementation "org.yaml:snakeyaml:1.26"
    implementation "com.cdancy:bitbucket-rest:2.6.2"
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'


    implementation "org.projectlombok:lombok:1.18.4"
    annotationProcessor "org.projectlombok:lombok:1.18.4"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.4"
}

clean {
    delete new java.util.HashSet([
        buildDir,
        "src/generated"
    ])
}

task generateXmlClasses {
    inputs.files pmdXsd, spotbugsXsd
    outputs.dir "src/generated/java/de/kekru/codeanalysisbb"
    doLast {
        "xjc -encoding UTF-8 -d src/generated/java -p de.kekru.codeanalysisbb.generated.pmd ${pmdXsd.absolutePath}"
            .execute()
            .waitForProcessOutput(System.out, System.err)

        "xjc -encoding UTF-8 -d src/generated/java -p de.kekru.codeanalysisbb.generated.spotbugs ${spotbugsXsd.absolutePath}"
                .execute()
                .waitForProcessOutput(System.out, System.err)
    }
}

compileJava.dependsOn(generateXmlClasses)

sourceSets {
    generated {
        java {
            srcDirs 'src/generated/java'
        }
    }
    main {
        compileClasspath += sourceSets.generated.runtimeClasspath
        runtimeClasspath += sourceSets.generated.runtimeClasspath
        java {
            srcDirs 'src/main/java'
        }
    }
    test {
        compileClasspath += sourceSets.generated.runtimeClasspath
        runtimeClasspath += sourceSets.generated.runtimeClasspath
        java {
            srcDirs 'src/test/java'
        }
    }
}

jar {
    from sourceSets.generated.output
    from sourceSets.main.output
}

task runnableJar(type: Jar) {
    group 'build'
    dependsOn build

    baseName += "-runnable"
    from sourceSets.generated.output
    from sourceSets.main.output

    manifest {
        attributes "Main-Class": "de.kekru.codeanalysisbb.CodeAnalysisBitbucketExporter"
    }

    from {
        configurations.runtimeClasspath
            .collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude("META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "**/lombok/**")
}

// build.finalizedBy runnableJar

application {
    mainClassName = 'de.kekru.codeanalysisbb.Main'
}

publishing {
    publications {
        pluginPublication (MavenPublication) {
            from        components.java
            groupId     project.group
            artifactId  project.name
            version     project.version
        }
    }
}


sonarqube {
    properties {
        property 'sonar.jacoco.reportPaths', 'build/jacoco/test.exec'
        property 'sonar.junit.reportPaths', 'build/test-results/test'

        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarqube.example.com"
        property "sonar.login", ""
        property "sonar.analysis.mode", "preview"
        property "sonar.issuesReport.html.enable", "true"
        property "sonar.projectKey", "code-analysis-bb"
    }
}


// PMD
pmd {
    // Configuration see: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.PmdExtension.html
    consoleOutput = true
    toolVersion = "6.21.0"
    rulePriority = 5
    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
}


// Checkstyle
// https://medium.com/@raveensr/how-to-add-checkstyle-and-findbugs-plugins-in-a-gradle-based-project-51759aa843be
checkstyle {
    toolVersion '7.8.1'
    ignoreFailures = true
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}
tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
    }
}


// Spotbugs
// https://github.com/spotbugs/spotbugs-gradle-plugin#readme
spotbugs {
    toolVersion = '4.0.3'
    ignoreFailures = true
}


checkstyleGenerated.enabled = false
checkstyleMain.enabled = false
checkstyleTest.enabled = false
pmdMain.enabled = false
pmdTest.enabled = false
spotbugsGenerated.enabled = false
spotbugsMain.enabled = false
spotbugsTest.enabled = false
