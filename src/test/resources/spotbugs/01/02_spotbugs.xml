<?xml version="1.0" encoding="UTF-8"?>

<BugCollection version="4.0.3" sequence="0" timestamp="1590256550277" analysisTimestamp="1590256550282" release="unspecified">
  <Project projectName="example-code-analysis-bitbucket-exporter (spotbugsTest)">
    <Jar>C:\Users\krummenauer\workspace\example-code-analysis-bitbucket-exporter\build\classes\java\test\de\kekru\example\codeanalysisbb\MainTest.class</Jar>
    <AuxClasspathEntry>C:\Users\krummenauer\workspace\example-code-analysis-bitbucket-exporter\build\classes\java\main</AuxClasspathEntry>
    <AuxClasspathEntry>C:\Users\krummenauer\workspace\example-code-analysis-bitbucket-exporter\build\resources\main</AuxClasspathEntry>
    <AuxClasspathEntry>C:\Users\krummenauer\.gradle\caches\modules-2\files-2.1\org.slf4j\slf4j-simple\1.7.9\f918aa891c5402deb6b4dc82862699bb82602a2e\slf4j-simple-1.7.9.jar</AuxClasspathEntry>
    <AuxClasspathEntry>C:\Users\krummenauer\.gradle\caches\modules-2\files-2.1\org.slf4j\slf4j-api\1.7.25\da76ca59f6a57ee3102f8f9bd9cee742973efa8a\slf4j-api-1.7.25.jar</AuxClasspathEntry>
    <AuxClasspathEntry>C:\Users\krummenauer\.m2\repository\junit\junit\4.12\junit-4.12.jar</AuxClasspathEntry>
    <AuxClasspathEntry>C:\Users\krummenauer\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar</AuxClasspathEntry>
    <SrcDir>C:\Users\krummenauer\workspace\example-code-analysis-bitbucket-exporter\src\test\resources</SrcDir>
    <SrcDir>C:\Users\krummenauer\workspace\example-code-analysis-bitbucket-exporter\src\test\java</SrcDir>
  </Project>
  <BugInstance type="OBL_UNSATISFIED_OBLIGATION" priority="2" rank="20" abbrev="OBL" category="EXPERIMENTAL" instanceHash="f1ea9175cff7d8bdad1008ad76156c68" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method may fail to clean up stream or resource</ShortMessage>
    <LongMessage>de.kekru.example.codeanalysisbb.MainTest.keepOpenStream() may fail to clean up java.io.InputStream</LongMessage>
    <Class classname="de.kekru.example.codeanalysisbb.MainTest" primary="true">
      <SourceLine classname="de.kekru.example.codeanalysisbb.MainTest" start="10" end="20" sourcefile="MainTest.java" sourcepath="de/kekru/example/codeanalysisbb/MainTest.java" relSourcepath="java\de\kekru\example\codeanalysisbb\MainTest.java">
        <Message>At MainTest.java:[lines 10-20]</Message>
      </SourceLine>
      <Message>In class de.kekru.example.codeanalysisbb.MainTest</Message>
    </Class>
    <Method classname="de.kekru.example.codeanalysisbb.MainTest" name="keepOpenStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="de.kekru.example.codeanalysisbb.MainTest" start="18" end="20" startBytecode="0" endBytecode="82" sourcefile="MainTest.java" sourcepath="de/kekru/example/codeanalysisbb/MainTest.java" relSourcepath="java\de\kekru\example\codeanalysisbb\MainTest.java"/>
      <Message>In method de.kekru.example.codeanalysisbb.MainTest.keepOpenStream()</Message>
    </Method>
    <Class classname="java.io.InputStream" role="CLASS_REFTYPE">
      <SourceLine classname="java.io.InputStream" start="45" end="364" sourcefile="InputStream.java" sourcepath="java/io/InputStream.java">
        <Message>At InputStream.java:[lines 45-364]</Message>
      </SourceLine>
      <Message>Reference type java.io.InputStream</Message>
    </Class>
    <Int value="1" role="INT_OBLIGATIONS_REMAINING">
      <Message>1 instances of obligation remaining</Message>
    </Int>
    <SourceLine classname="de.kekru.example.codeanalysisbb.MainTest" primary="true" start="18" end="18" startBytecode="13" endBytecode="13" sourcefile="MainTest.java" sourcepath="de/kekru/example/codeanalysisbb/MainTest.java" relSourcepath="java\de\kekru\example\codeanalysisbb\MainTest.java" role="SOURCE_LINE_OBLIGATION_CREATED">
      <Message>Obligation to clean up resource created at MainTest.java:[line 18] is not discharged</Message>
    </SourceLine>
    <SourceLine classname="de.kekru.example.codeanalysisbb.MainTest" start="19" end="19" startBytecode="17" endBytecode="17" sourcefile="MainTest.java" sourcepath="de/kekru/example/codeanalysisbb/MainTest.java" relSourcepath="java\de\kekru\example\codeanalysisbb\MainTest.java" role="SOURCE_LINE_PATH_CONTINUES">
      <Message>Path continues at MainTest.java:[line 19]</Message>
    </SourceLine>
    <SourceLine classname="de.kekru.example.codeanalysisbb.MainTest" start="20" end="20" startBytecode="22" endBytecode="22" sourcefile="MainTest.java" sourcepath="de/kekru/example/codeanalysisbb/MainTest.java" relSourcepath="java\de\kekru\example\codeanalysisbb\MainTest.java" role="SOURCE_LINE_PATH_CONTINUES">
      <Message>Path continues at MainTest.java:[line 20]</Message>
    </SourceLine>
    <String value="{InputStream x 1}" role="STRING_REMAINING_OBLIGATIONS">
      <Message>Remaining obligations: {InputStream x 1}</Message>
    </String>
  </BugInstance>
  <BugInstance type="OS_OPEN_STREAM" priority="2" rank="16" abbrev="OS" category="BAD_PRACTICE" instanceHash="d43f75bcb57e089d7c9e74bcdc4e34ee" instanceOccurrenceNum="0" instanceOccurrenceMax="0">
    <ShortMessage>Method may fail to close stream</ShortMessage>
    <LongMessage>de.kekru.example.codeanalysisbb.MainTest.keepOpenStream() may fail to close stream</LongMessage>
    <Class classname="de.kekru.example.codeanalysisbb.MainTest" primary="true">
      <SourceLine classname="de.kekru.example.codeanalysisbb.MainTest" start="10" end="20" sourcefile="MainTest.java" sourcepath="de/kekru/example/codeanalysisbb/MainTest.java" relSourcepath="java\de\kekru\example\codeanalysisbb\MainTest.java">
        <Message>At MainTest.java:[lines 10-20]</Message>
      </SourceLine>
      <Message>In class de.kekru.example.codeanalysisbb.MainTest</Message>
    </Class>
    <Method classname="de.kekru.example.codeanalysisbb.MainTest" name="keepOpenStream" signature="()V" isStatic="false" primary="true">
      <SourceLine classname="de.kekru.example.codeanalysisbb.MainTest" start="18" end="20" startBytecode="0" endBytecode="11" sourcefile="MainTest.java" sourcepath="de/kekru/example/codeanalysisbb/MainTest.java" relSourcepath="java\de\kekru\example\codeanalysisbb\MainTest.java"/>
      <Message>In method de.kekru.example.codeanalysisbb.MainTest.keepOpenStream()</Message>
    </Method>
    <Type descriptor="Ljava/io/InputStream;" role="TYPE_CLOSEIT">
      <SourceLine classname="java.io.InputStream" start="45" end="364" sourcefile="InputStream.java" sourcepath="java/io/InputStream.java">
        <Message>At InputStream.java:[lines 45-364]</Message>
      </SourceLine>
      <Message>Need to close java.io.InputStream </Message>
    </Type>
    <SourceLine classname="de.kekru.example.codeanalysisbb.MainTest" primary="true" start="18" end="18" startBytecode="0" endBytecode="0" sourcefile="MainTest.java" sourcepath="de/kekru/example/codeanalysisbb/MainTest.java" relSourcepath="java\de\kekru\example\codeanalysisbb\MainTest.java">
      <Message>At MainTest.java:[line 18]</Message>
    </SourceLine>
  </BugInstance>
  <BugCategory category="BAD_PRACTICE">
    <Description>Bad practice</Description>
  </BugCategory>
  <BugCategory category="EXPERIMENTAL">
    <Description>Experimental</Description>
  </BugCategory>
  <BugPattern type="OBL_UNSATISFIED_OBLIGATION" abbrev="OBL" category="EXPERIMENTAL">
    <ShortDescription>Method may fail to clean up stream or resource</ShortDescription>
    <Details><![CDATA[

          <p>
          This method may fail to clean up (close, dispose of) a stream,
          database object, or other
          resource requiring an explicit cleanup operation.
          </p>

          <p>
          In general, if a method opens a stream or other resource,
          the method should use a try/finally block to ensure that
          the stream or resource is cleaned up before the method
          returns.
          </p>

          <p>
          This bug pattern is essentially the same as the
          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE
          bug patterns, but is based on a different
          (and hopefully better) static analysis technique.
          We are interested is getting feedback about the
          usefulness of this bug pattern.
          For sending feedback, check:
          </p>
          <ul>
            <li><a href="https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md">contributing guideline</a></li>
            <li><a href="https://github.com/spotbugs/discuss/issues?q=">malinglist</a></li>
          </ul>

          <p>
          In particular,
          the false-positive suppression heuristics for this
          bug pattern have not been extensively tuned, so
          reports about false positives are helpful to us.
          </p>

          <p>
          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for
          a description of the analysis technique.
          </p>

      ]]></Details>
  </BugPattern>
  <BugPattern type="OS_OPEN_STREAM" abbrev="OS" category="BAD_PRACTICE">
    <ShortDescription>Method may fail to close stream</ShortDescription>
    <Details><![CDATA[

<p> The method creates an IO stream object, does not assign it to any
fields, pass it to other methods that might close it,
or return it, and does not appear to close
the stream on all paths out of the method.&nbsp; This may result in
a file descriptor leak.&nbsp; It is generally a good
idea to use a <code>finally</code> block to ensure that streams are
closed.</p>

    ]]></Details>
  </BugPattern>
  <BugCode abbrev="OS">
    <Description>Stream not closed on all paths</Description>
  </BugCode>
  <BugCode abbrev="OBL">
    <Description>Unsatisfied obligation to clean up stream or resource</Description>
  </BugCode>
  <Errors errors="0" missingClasses="0"></Errors>
  <FindBugsSummary timestamp="Sat, 23 May 2020 19:55:50 +0200" total_classes="1" referenced_classes="16" total_bugs="2" total_size="10" num_packages="1" java_version="1.8.0_212" vm_version="25.212-b03" cpu_seconds="4.09" clock_seconds="1.03" peak_mbytes="194.75" alloc_mbytes="455.50" gc_seconds="0.01" priority_2="2">
    <FileStats path="de/kekru/example/codeanalysisbb/MainTest.java" bugCount="2" size="10" bugHash="4f0bca6a577d7532b81629e3e0eb9496"/>
    <PackageStats package="de.kekru.example.codeanalysisbb" total_bugs="2" total_types="1" total_size="10" priority_2="2">
      <ClassStats class="de.kekru.example.codeanalysisbb.MainTest" sourceFile="MainTest.java" interface="false" size="10" bugs="2" priority_2="2"/>
    </PackageStats>
    <FindBugsProfile>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.ClassDataAnalysisEngine" totalMilliseconds="556" invocations="360" avgMicrosecondsPerInvocation="1545" maxMicrosecondsPerInvocation="2651" standardDeviationMicrosecondsPerInvocation="323"/>
      <ClassProfile name="edu.umd.cs.findbugs.classfile.engine.ClassInfoAnalysisEngine" totalMilliseconds="137" invocations="358" avgMicrosecondsPerInvocation="382" maxMicrosecondsPerInvocation="11084" standardDeviationMicrosecondsPerInvocation="852"/>
    </FindBugsProfile>
  </FindBugsSummary>
  <ClassFeatures></ClassFeatures>
  <History></History>
</BugCollection>
